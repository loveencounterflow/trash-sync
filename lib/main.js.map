{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,EAAA,WAAA,EAAA,SAAA;;;EAGA,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,oBAAR,CAA5B;;EACA,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,SAAR,CAA5B;;EACA,CAAA,CAAE,GAAF,EAAO,KAAP,CAAA,GAA4B,OAA5B;;EACA,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,WAAR,CAA5B;;EACA,WAAA,GAA4B,MAAA,KAAU,OAAO,CAAC,KAP9C;;;EAWA,MAAA,GAAS,QAAA,CAAE,IAAF,CAAA;AACT,QAAA;AAAE;MACE,KAAA,GAAQ,SAAA,CAAU,IAAV,EADV;KAEA,cAAA;MAAM;MACJ,IAAgB,KAAK,CAAC,IAAN,KAAc,QAA9B;AAAA,eAAO,MAAP;;MACA,MAAM,MAFR;;AAGA,WAAO,KAAK,CAAC,MAAN,CAAA,CAAA,IAAkB,KAAK,CAAC,WAAN,CAAA;EANlB,EAXT;;;EAoBA,IAAC,CAAA,KAAD,GAAS,QAAA,CAAE,IAAF,CAAA;AACT,QAAA,YAAA,EAAA,SAAA,EAAA,QAAA,EAAA,MAAA,EAAA,MAAA,EAAA;IAAE,KAAgB,MAAA,CAAO,IAAP,CAAhB;AAAA,aAAO,EAAP;;IACA,QAAA,GAAY,GAAA,CAAI,IAAJ;IACZ,SAAA,GAAY,CAAA,sCAAA,CAAA,CAAyC,QAAzC,CAAA,CAAA;IACZ,CAAA,CAAE,MAAF,EACE,MADF,EAEE,MAFF,CAAA,GAEa,SAAA,CAAU,OAAO,CAAC,QAAlB,EAA4B,CAAE,IAAF,EAAQ,SAAR,CAA5B,EAAkD;MAAE,QAAA,EAAU;IAAZ,CAAlD,CAFb,EAHF;;IAOE,IAAO,MAAA,KAAU,CAAjB;MACE,KAA8B,WAA9B;QAAA,MAAM,IAAI,KAAJ,CAAU,MAAV,EAAN;OAAJ;;MAEI,YAAA,GAAe,CAAA,CAAA,CAAG,OAAO,CAAC,QAAX,CAAA,IAAA,CAAA,CAA0B,SAA1B,CAAA;MACf,KAAA,CAAM,CAAA,4CAAA,CAAA,CAA+C,GAAA,CAAI,YAAJ,CAA/C,CAAA,CAAN;MACA,KAAA,CAAM,GAAA,CAAI,YAAJ,CAAN;MACA,KAAA,CAAA;MACA,KAAA,CAAM,MAAN;MACA,OAAO,CAAC,IAAR,CAAa,MAAb,EARF;;IAUA,KAAgB,MAAA,CAAO,IAAP,CAAhB;;AAAA,aAAO,EAAP;;AACA,WAAO;EAnBA,EApBT;;;EA0CA,IAAG,WAAH;IAAuB,CAAA,CAAA,CAAA,GAAA;AACvB,UAAA;MAAE,IAAO,gCAAP;QACE,GAAA,CAAI,sEAAJ;QACA,OAAO,CAAC,IAAR,CAAa,GAAb,EAFF;;aAGA,GAAA,CAAI,CAAA,MAAA,CAAA,CAAS,IAAT,CAAA,CAAJ,EAAqB,IAAC,CAAA,KAAD,CAAO,IAAP,CAArB;IAJqB,CAAA,IAAvB;;AA1CA",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\n{ spawnSync,  }           = require 'node:child_process'\n{ lstatSync,  }           = require 'node:fs'\n{ log, error, }           = console\n{ rpr, }                  = require './inspect'\nruns_as_cli               = module is require.main\n\n\n#===========================================================================================================\nexists = ( path ) ->\n  try\n    stats = lstatSync path\n  catch error\n    return false if error.code is 'ENOENT'\n    throw error\n  return stats.isFile() or stats.isDirectory()\n\n#-----------------------------------------------------------------------------------------------------------\n@trash = ( path ) ->\n  return 0 unless exists path\n  path_rpr  = rpr path\n  js_source = \"import trash from 'trash';await trash(#{path_rpr})\"\n  { stdout\n    stderr\n    status } = spawnSync process.execPath, [ '-e', js_source, ], { encoding: 'utf-8', }\n  #.........................................................................................................\n  unless status is 0\n    throw new Error stderr unless runs_as_cli\n    #.......................................................................................................\n    command_line = \"#{process.execPath} -e #{js_source}\"\n    error \"something when wrong when trying to execute #{rpr command_line}\"\n    error rpr command_line\n    error()\n    error stderr\n    process.exit status\n  #.........................................................................................................\n  return 1 unless exists path\n  return 0\n\n#===========================================================================================================\nif runs_as_cli then do =>\n  unless ( path = process.argv[ 2 ] )?\n    log \"provide a path to a file system object you want to move to the trash\"\n    process.exit 111\n  log \"trash #{path}\", @trash path\n\n"
  ]
}